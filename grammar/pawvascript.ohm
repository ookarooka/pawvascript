`PawvaScript {
    Program     = Block+
    Block       = (Exp "\n")*
                | Loop
    Body        = ":" Block* end
    Loop        = loop Exp "times" Body
                | loop "while" "(" Exp ")" Body
                | loop id "through" id Body
                | loop VarDec "by" Exp "while" Exp Body
                | loop Body
    Exp         = Declaration
                | FuncCall
    Declaration = bark (FuncDec | VarDec | ClassDec)
    FuncDec     = func id "chases" Parameters ("fetches" type)? Body
    VarDec      = type id Grouping? "is" Exp
    Grouping    = "[" type (":" type)? "]"
    ClassDec    = "breed" id Body
    FuncCall    = id "(" (Exp ",")* Exp? ")"
    Parameters  = "[" (type ":" id)? ("," type ":" id)* "]"
    Exp         = id
                | FuncCall
                | RelopExp
    EqualityExp = Term equalityop Term
    RelopExp    = Term "is" relop "than" Term
                | Term
    Term        = Term ("+" | "-") Factor       --addOp
                | Factor
    Factor      = Factor ("*" | "/") Negation   --mulOp
                | Negation
    Negation    = "-"? Factorial
    Factorial   = Primary "!"?
    Primary     = "(" Exp ")"                   --parens
                | numlit
                | strlit
                | "[" Exp? ("," Exp)* "]"
                | "[" (Exp":"Exp)? ("," Exp":"Exp)* "]"
    numlit      = digit+ ("." digit+)?
    strlit      = "\"" (char | "'")* "\""
    char        = escape
                | ~"\\" ~"\"" ~"'" ~"\n" any
    escape      = "\\\\" | "\\\"" | "\\'" | "\\n"
    equalityop  = "equals" | "not equals"
    relop       = "greater" | "at least" | "at most" | "less"
    end         := "end" ~alnum
    keyword     = end | equalityop | relop | "func" | "is" | "breed"
    id          = ~keyword (letter "_") (letter | digit | "_")*
    space         += comment
	comment        = singlecom
                     |  multicom
    singlecom      = ~"!!" "!" (~"!" ~"\n" any)* "\n"
    multicom       = "!!" (~"!!" any)* "!!"
}`

PawvaScript {
    Program 	    = Block
    Block 		    = (Statement)*
    Conditional     = if Exp then ":" Block (else if Exp then ":" Block)+ (else ":")? Block     --elseif
                    | if Exp then ":" Block else ":" Block                                      --else
                    | if Exp then ":" Block						                                --basic
    Chase           = chase Exp "times" ":" Block                                               --defined
                    | chase "while" Exp ":" Block                                               --while
                    | chase id "through" id ":" Block                                           --through
                    | chase VarDec "by" Exp "while" Exp ":" Block                               --for
                    | chase ":" Block													        --infinite
    Statement       = Declaration                                                               --declaration
                    | Assignment ";"                                                            --assignment
                    | FuncCall tail                                                             --funcCall
                    | Woof ";"			                                                        --woof
                    | Bark ";"			                                                        --bark
                    | Howl ";"                                                                  --howl
                    | "give" Exp ";"                                                            --give
                    | Chase tail                                                                --chase
                    | Conditional tail                                                          --conditional
                    | Exp ";"			                                                        --expression
    Assignment      = id Grouping? is Exp
    Woof            = woof Exp
    Bark            = bark Exp
    Howl            = howl Exp
    Declaration     = FuncDec                                                                   --FuncDec
                    | VarDec ";"                                                                --VarDec
                    | TypeDec                                                                   --TypeDec
    FuncDec         = trick id (chews Parameters)? (fetches type)? ":" Block tail               --funcDec
                    | trick id (chews Parameters)? (fetches id) ";"                             --contructorDec
    VarDec          = type id Grouping? is Exp                                                  --fullDec
                    | type id Grouping?                                                         --defaultDec
    TypeDec         = breed id is ":" Block tail                                                --typeDec
    Grouping        = "[" type (":" type)? "]"
    FuncCall        = id "(" (Exp ",")* Exp? ")"
    Parameters      = "[" (type ":" id)? ("," type ":" id)* "]"
    Exp             = FuncCall
                    | RelopExp
    RelopExp        = Term is Term                                                              --assignment
                    | Term relop Term                                                           --relop
                    | Term
    Term            = Term ("+" | "-" | (~without with) | without) Factor                       --addOp
                    | Factor
    Factor          = Factor ("*" | "/" | "mod") Negation                                       --mulOp
                    | Negation
    Negation        = "-"? Factorial                                                            --arithmeticNeg
                    | not Factorial                                                             --logicalNeg
    Factorial       = Primary "!"?                                                   
    Primary         = "(" Exp ")"                                                               --parens
                    | id "\'s" Exp                                                              --propertyOp
                    | numlit
                    | strlit
                    | boolean
                    | id
                    | "[" (peanutButter? Exp)? ("," peanutButter? Exp)* "]"                     --pack
                    | "[" (Exp":"Exp)? ("," Exp":"Exp)* "]"                                     --map
    type            = toeBeans | leash | goodBoy | pack | map | breed | id
    numlit          = digit+ ("." digit+)?
    strlit          = "\"" (char | "'")* "\""
    char            = escape
                    | interpolation
                    | ~"\\" ~"\"" ~"'" ~"\n" any
    interpolation   = "![" id "]"
    escape          = "\\\\" | "\\\"" | "\\'" | "\\n"
    boolean         = good | bad
    relop           = "isGreaterThan" | "isAtLeast" | "isAtMost" | "isLessThan" | equalityop
    equalityop      = "equals" | "notEquals"
    is              = "is" ~alnum
    toeBeans        = "toeBeans" ~alnum
    leash           = "leash" ~alnum
    goodBoy         = "goodBoy" ~alnum
    pack            = "pack" ~alnum
    map             = "map" ~alnum
    breed           = "breed" ~alnum
    chase           = "chase" ~alnum
    tail            = "tail" ~alnum
    else            = "else" ~alnum
    bark            = "bark" ~alnum
    woof            = "woof" ~alnum
    howl            = "howl" ~alnum
    trick           = "trick" ~alnum
    if              = "if" ~alnum
    then            = "then" ~alnum
    good            = "good" ~alnum
    bad             = "bad" ~alnum 
    chews           = "chews" ~alnum
    fetches         = "fetches" ~alnum
    give            = "give" ~alnum
    with            = "with" ~alnum
    without         = "without" ~alnum
    not             = "not" ~alnum
    peanutButter    = "peanutButter" ~alnum
    keyword         = equalityop 
                    | relop 
                    | type
                    | is 
                    | chase 
                    | tail 
                    | else 
                    | bark 
                    | woof
                    | howl
                    | trick 
                    | if 
                    | then 
                    | good 
                    | bad 
                    | chews 
                    | fetches 
                    | give 
                    | with 
                    | without 
                    | not
                    | peanutButter
    id              = ~keyword (letter | "_") (letter | digit | "_")*
    space           += comment
    comment         = "!!!" (~"!!!" any)* "!!!"
}

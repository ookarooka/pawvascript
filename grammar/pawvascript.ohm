PawvaScript {
    Program         = Block
    Block           = (Statement)*
    Conditional     = if Exp then ":" Block (else if Exp then ":" Block)+ (else ":")? Block     --elseif
                    | if Exp then ":" Block else ":" Block                                      --else
                    | if Exp then ":" Block                                                     --basic
    Chase           = chase Exp times ":" Block                                                 --defined
                    | chase while Exp ":" Block                                                 --while
                    | chase id through id ":" Block                                             --through
                    | chase VarDec by Exp while Exp ":" Block                                   --for
                    | chase ":" Block                                                           --infinite
    Statement       = Declaration
                    | Assignment ";"
                    | FuncCall ";"
                    | Woof ";"                                                                  
                    | Bark ";"                                                                  
                    | Howl ";"                                                                  
                    | give Exp? ";"                                                             --give
                    | Chase tail
                    | Conditional tail
                    | Property ";"
    Assignment      = id Grouping? is Exp
    Woof            = woof Exp
    Bark            = bark Exp
    Howl            = howl Exp
    Declaration     = FuncDec
                    | TypeDec
                    | VarDec ";"                                                                --varDec
    FuncDec         = trick id (chews Parameters)? (fetches type)? ":" Block tail               --basic
                    | trick id (chews Parameters)? (fetches type) ";"                           --constructor
    VarDec          = type id Grouping? (is Exp)?
    TypeDec         = breed id is ":" Block tail
    Grouping        = "[" (type ":")? type "]"
    FuncCall        = id "(" Exp? ("," Exp)* ")"
    Parameters      = "[" (type ":" id)? ("," type ":" id)* "]"
    Exp             = FuncCall                                                                  --funcCall
                    | RelopExp
    RelopExp        = Term is Term                                                              --assignment
                    | Term relop Term                                                           --relop
                    | Term
    Term            = Term ("+" | "-" | (~without with) | without) Factor                       --addOp
                    | Factor
    Factor          = Factor ("*" | "/" | mod) Negation                                         --mulOp
                    | Negation
    Negation        = "-"? Factorial                                                            --arithmeticNeg
                    | not Factorial                                                             --logicalNeg
    Factorial       = Primary "!"?                                                   
    Primary         = "(" Exp ")"                                                               --parens
                    | Property                                                                  --propertyOp
                    | numlit
                    | strlit
                    | boolean
                    | id
                    | "[" (peanutButter? Exp)? ("," peanutButter? Exp)* "]"                     --pack
                    | "[" (Exp":"Exp)? ("," Exp":"Exp)* "]"                                     --kennel
    Property        = id "\'s" Exp
    type            = toeBeans | leash | goodBoy | pack | kennel | breed | id
    numlit          = digit+ ("." digit+)?
    strlit          = "\"" (char | "'")* "\""
    char            = escape
                    | interpolation
                    | ~"\\" ~"\"" ~"'" ~"\n" ~"!" any
    interpolation   = "![" id "]"
    escape          = "\\\\" | "\\\"" | "\\'" | "\\n" | "\\!"
    boolean         = good | bad
    relop           = "isGreaterThan" | "isAtLeast" | "isAtMost" | "isLessThan" | equalityop
    equalityop      = "equals" | "notEquals"
    is              = "is" ~alnum
    toeBeans        = "toeBeans" ~alnum
    leash           = "leash" ~alnum
    goodBoy         = "goodBoy" ~alnum
    pack            = "pack" ~alnum
    kennel          = "kennel" ~alnum
    breed           = "breed" ~alnum
    chase           = "chase" ~alnum
    tail            = "tail" ~alnum
    else            = "else" ~alnum
    bark            = "bark" ~alnum
    woof            = "woof" ~alnum
    howl            = "howl" ~alnum
    trick           = "trick" ~alnum
    if              = "if" ~alnum
    then            = "then" ~alnum
    good            = "good" ~alnum
    bad             = "bad" ~alnum 
    chews           = "chews" ~alnum
    fetches         = "fetches" ~alnum
    give            = "give" ~alnum
    with            = "with" ~alnum
    without         = "without" ~alnum
    not             = "not" ~alnum
    peanutButter    = "peanutButter" ~alnum
    times           = "times" ~alnum
    while           = "while" ~alnum
    through         = "through" ~alnum
    by              = "by" ~alnum
    mod             = "mod" ~alnum
    keyword         = equalityop 
                    | relop 
                    | type
                    | is 
                    | chase 
                    | tail 
                    | else 
                    | bark 
                    | woof
                    | howl
                    | trick 
                    | if 
                    | then 
                    | good 
                    | bad 
                    | chews 
                    | fetches 
                    | give 
                    | with 
                    | without 
                    | not
                    | peanutButter
                    | times
                    | while
                    | through
                    | by
                    | mod
    id              = ~keyword (letter | "_") (letter | digit | "_")*
    space           += comment
    comment         = "!!!" (~"!!!" any)* "!!!"
}
